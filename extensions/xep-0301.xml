<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>In-Band Real Time Text</title>
  <abstract>This is a specification for real-time text transmitted in-band over an XMPP session.</abstract>
  &LEGALNOTICE;
  <number>0301</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies>
    <spec>XMPP Core</spec>
    <spec>XEP-0020</spec>
  </dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>NOT_YET_ASSIGNED</shortname>
  <author>
    <firstname>Mark</firstname>
    <surname>Rejhon</surname>
    <email>mark@realjabber.org</email>
    <jid>markybox@gmail.com</jid>
    <org>RealJabber.org and Rejhon Technologies Inc.</org>
    <uri>http://www.realjabber.com</uri>
  </author>
  <revision>
    <version>0.2</version>
    <date>2012-03-19</date>
    <initials>MDR</initials>
    <remark><p>Lots of edits. Simplifications, improvements and corrections. Forward and backward compatible with version 0.1.</p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2011-06-29</date>
    <initials>psa</initials>
    <remark><p>Initial published version.</p></remark>
  </revision>
  <revision>
    <version>0.0.3</version>
    <date>2011-06-25</date>
    <initials>MDR</initials>
    <remark><p>Third draft, recommended edits.</p></remark>
  </revision>
  <revision>
    <version>0.0.2</version>
    <date>2011-06-15</date>
    <initials>MDR</initials>
    <remark><p>Second draft.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2011-02-21</date>
    <initials>MDR</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>



        <section1 topic="Introduction" anchor="introduction">
    <p><strong>Real-time text is text transmitted live while it is being typed or created.</strong> The recipient can immediately read the sender's typing, without waiting before reading. This is similar to a telephone conversation where one listens "as words are spoken". This allows text to be used conversationally, provides a sense of contact, eliminates waiting times found in messaging, and is favored by deaf individuals who prefer text conversation. For a visual animation of real-time text, see <span class="ref"><strong><link url="http://www.realjabber.org">RealJabber.org</link></strong></span>
  <note>RealJabber.org is the author's web site containing work related to this specification, including animation examples of what real time text looks like. &lt;<link url="http://www.realjabber.org">http://www.realjabber.org</link>&gt;.</note>.</p>
    <p>Real-time text has been around for decades in various implementations:</p>
    <ul>
      <li>The 'talk' command on UNIX systems since the 1970's.</li>
      <li>ICQ had a peer-to-peer split screen mode from 1996-1999.</li>
      <li>TTY and text telephones for the deaf.</li>
      <li>For SIP, real-time text is sent using <span class="ref"><strong><link url="http://tools.ietf.org/html/rfc4103">IETF RFC 4103</link></strong></span> <note>IETF RFC 4103: RTP Payload for Text Conversation. &lt;<link url="http://tools.ietf.org/html/rfc4103">http://tools.ietf.org/html/rfc4103</link>&gt;.</note> with <span class="ref"><strong><link url="http://www.itu.int/rec/T-REC-T.140">ITU-T T.140</link></strong></span> <note>ITU-T T.140: Protocol for multimedia application text conversation. &lt;<link url="http://www.itu.int/rec/T-REC-T.140">http://www.itu.int/rec/T-REC-T.140</link>&gt;.</note> presentation coding.</li>
      <li>In 2008, AOL AIM 6.8 gained the <span class="ref"><strong><link url="http://help.aol.com/help/microsites/microsite.do?cmd=displayKC&amp;externalId=223568">AOL Real-Time IM</link></strong></span> <note>AOL AIM Real Time Text: &lt;<link url="http://help.aol.com/help/microsites/microsite.do?cmd=displayKC&amp;externalId=223568">http://help.aol.com/help/microsites/microsite.do?cmd=displayKC&amp;externalId=223568</link>&gt;.</note> feature.</li>
      <li>Deployment of <span class="ref"><strong><link url="http://www.reach112.eu">Reach112</link></strong></span> <note>Reach112: European emergency service with real-time text. &lt;<link url="http://www.reach112.eu">http://www.reach112.eu</link>&gt;.</note> in Europe, an accessible emergency service with real-time text.</li>
    </ul>



    <p>Real-time text is suitable for smooth and rapid mainstream communication in text, as an all-inclusive technology to complement instant messaging. At the same time, real-time text has special usefulness to many audiences including the deaf and other people who cannot use speech on the telephone. This document defines a specification for real-time text transmitted in-band over an XMPP network.</p>
    </section1>
    <section1 topic="Requirements" anchor="requirements">
        <section2 topic="Fluid Real-Time Text" anchor="fluid_realtime_text">
    <ol>
      <li>Allow transmission of real-time text with a low latency.</li>
      <li>Balance low latencies versus system, network and server limitations.</li>
      <li>Support message editing in real-time, including text insertions and deletions.</li>
      <li>Support transmission of the original intervals between key presses, to preserve look-and-feel of typing independently of transmission intervals.</li>
    </ol>
    </section2>
    <section2 topic="In-Band Transmission" anchor="inband_transmission">
    <ol>
      <li>Reliable real-time text delivery.</li>
      <li>Be backwards compatible with XMPP clients that do not support real-time text.</li>
      <li>Minimize reliance on knowledge of network transversal protocols and/or out-of-band transmission protocols.</li>
      <li>Compatible with multi-user chat (MUC) and simultaneous logins.</li>
    </ol>
    </section2>
    <section2 topic="Flexible and Interoperable" anchor="flexible_and_interoperable">
    <ol>
      <li>Allow use within existing instant-messaging user interfaces, with minimal UI modifications.</li>
      <li>Allow alternate optional presentations of real-time text, including split screen and/or other layouts.</li>
      <li>Protocol design allows error recovery, and allows extensions for new features.</li>
      <li>Be interoperable with other real-time text protocols via gateways, including RFC 4103 and other standards.</li>
    </ol>
    </section2>
    <section2 topic="Accessible" anchor="accessible">
    <ol>
      <li>Allow XMPP to follow the <span class="ref"><strong><link url="http://www.itu.int/rec/T-REC-F.703">ITU-T Rec. F.703</link></strong></span> <note>ITU-T Rec. F.703: Multimedia conversational services. &lt;<link url="http://www.itu.int/rec/T-REC-F.703">http://www.itu.int/rec/T-REC-F.703</link>&gt;.</note> Total Conversation accessibility standard for simultaneous voice, video, and real-time text.</li>
      <li>Be a candidate technology for use with Next Generation 9-1-1 / 1-1-2 emergency services.</li>
      <li>Be suitable for transcription services and (when coupled with voice at user's choice) for TTY/text telephone alternatives, relay services, and captioned telephone systems.</li>
      <li>Be an accessible enhancement for mobile phone text messaging and mainstream instant messaging.</li>
    </ol>
    </section2>
</section1>
    <section1 topic="Glossary" anchor="glossary">
    <p><strong>real-time text</strong> – Text transmitted live while it is being typed or created.</p>
    <p><strong>real-time message</strong> – Recipient's real-time live view of the sender's message still being typed or created.</p>
    <p><strong>real-time message edit</strong> – An edit operation done by the remote sender, that is transmitted in real-time to the recipient.</p>
    <p><strong>action element</strong> – An XML element that represents a single real-time message edit, such as text insertion or deletion.</p>
    <p><strong>RTT</strong> – Acronym for real-time text.</p>
    </section1>
    <section1 topic="Protocol" anchor="protocol">
        <section2 topic="RTT Element" anchor="rtt_element">
    <p>Real-time text is transmitted via an &lt;rtt/&gt; child element of a &lt;message/&gt; stanza. The &lt;rtt/&gt; element is transmitted at regular intervals by the sender while a chat message is being composed, to allow the recipient to watch the sender type (and edit) the message before the full message is sent in a &lt;body/&gt; element.</p>
    <p>This is a basic example of a <em><strong>real-time message</strong></em> "Hello, my Juliet!", transmitted live while it is being typed, before a final message delivery:</p>
    <p><strong>Example 1: Introductory Example</strong></p>
    <p><code><![CDATA[<message to='juliet@capulet.lit' from='romeo@montague.lit/orchard' type='chat' id='a01'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>Hello, </t>
  </rtt>
</message>

<message to='juliet@capulet.lit' from='romeo@montague.lit/orchard' type='chat' id='a02'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='1'>
    <t>my </t>
  </rtt>
</message>

<message to='juliet@capulet.lit' from='romeo@montague.lit/orchard' type='chat' id='a03'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='2'>
    <t>Juliet!</t>
  </rtt>
</message>

<message to='juliet@capulet.lit' from='romeo@montague.lit/orchard' type='chat' id='a04'>
  <body>Hello, my Juliet!</body>
</message>]]></code></p>



    <p>The &lt;rtt/&gt; element contains a series of one or more child elements called <em><strong>action elements</strong></em> that represent <em><strong>real-time message edits</strong></em> such as text being appended, inserted, or deleted. Example 1 illustrates only the &lt;t/&gt; action element, which appends text to the end of a message. For more information, see <link url="#realtime_message_editing">Real-Time Message Editing</link>.</p>
    <p>Transmission of &lt;rtt/&gt; occurs at regular intervals whenever the sender is actively composing a message. If there are no changes to the message since the last transmission, no transmission occurs. For more information, see <link url="#transmission_interval">Transmission Interval</link>.</p>
    <p>The namespace of the &lt;rtt/&gt; element is “urn:xmp:rtt:0”.</p>
    </section2>
    <section2 topic="RTT Attributes" anchor="rtt_attributes">
        <section3 topic="seq" anchor="seq">
    <p>This REQUIRED attribute is a counter to maintain the integrity of a real-time message. Senders MUST increment the <strong>seq</strong> attribute by 1 for each subsequent &lt;rtt/&gt; transmitted. Recipients MUST monitor the <strong>seq</strong> value to verify that it is incrementing. For more info, see <link url="#automatic_recovery_of_realtime_text">Automatic Recovery of Real-Time Text</link>.</p>
    <p>The bounds of <strong>seq</strong> is 31-bits, the range of positive values of a signed integer. The exception to the incrementing rule is &lt;rtt/&gt; elements with an 'event' attribute. In this case, senders MAY use any <strong>seq</strong> value as the new starting value. For best integrity, <strong>seq</strong> SHOULD be randomized. The new starting value SHOULD be less than 1 million to allow plenty of incrementing room, and to keep &lt;rtt/&gt; compact.</p>
    </section3>
    <section3 topic="event" anchor="event">
    <p>This attribute signals events for real-time messages, such as the start of a new real-time message. The <strong>event</strong> attribute is omitted from the &lt;rtt/&gt; element, when it is not needed, except in the following situations:</p>
    <ol>
      <li><p><strong>event='new'</strong><br />
        Senders MUST use this value on the first &lt;rtt/&gt; element of a new message, which also delivers the first character(s) being typed in a message. Recipients MUST initialize a new real-time message for display, and then process action elements within this &lt;rtt/&gt;. A new <strong>seq</strong> value MAY be used.</p></li>
      <li><p><strong>event='reset'</strong><br />
        Identical to event='new', except it replaces the existing real-time message. Senders MAY use this attribute during <link url="#automatic_recovery_of_realtime_text">Automatic Recovery of Real-Time Text</link>. Recipients MUST support this attribute, and process action elements within this &lt;rtt/&gt; to replace the existing real-time message.</p></li>
      <li><p><strong>event='cancel'</strong><br />
        Senders MAY use this value to signal recipient to stop transmitting real-time text. Recipients SHOULD clear the real-time message, and discontinue sending back &lt;rtt/&gt; for the remainder of the current chat session until the sender sends another &lt;rtt/&gt; to resume real-time text. No action elements should be included within &lt;rtt/&gt;.</p></li>
    </ol>
    <p>The first &lt;rtt/&gt; element in a chat session, signals the start of real-time text. The &lt;rtt event='cancel'/&gt; signals the end of real-time text in a chat session. There MUST NOT be more than one &lt;rtt/&gt; element per &lt;message/&gt;.&nbsp;</p>
    </section3>
</section2>
    <section2 topic="Body Element" anchor="body_element">
    <p>Upon receipt of &lt;body/&gt;, the message becomes permanent and can not be edited any further. The delivered message is displayed instead of the real-time message. In the ideal case, the message from &lt;body/&gt; is redundant since this delivered message is identical to the final contents of the real-time message. When the sender begins composing a new message after a &lt;body/&gt; is sent, the next &lt;rtt/&gt; transmitted by the sender MUST contain the <strong>event='new'</strong> attribute.</p>
        <section3 topic="Backwards Compatible" anchor="backwards_compatible">
    <p>The real-time text standard simply provides early delivery of text before the &lt;body/&gt; element. The &lt;body/&gt; element continues to follow the &xmppcore; standard. Clients that do not support real-time text, will continue to behave normally, displaying complete lines of messages as they are delivered.</p>
    </section3>
</section2>
    <section2 topic="Transmission Interval" anchor="transmission_interval">
    <p>For the best balance between interoperability and usability, the transmission interval of &lt;rtt/&gt; for a continuously-changing message SHOULD be approximately <strong>0.7 second</strong>. This interval meets <span class="ref"><strong><link url="http://www.itu.int/rec/T-REC-F.700">ITU-T Rec. F.700</link></strong></span> <note>ITU-T Rec. F.700: Framework Recommendation for multimedia services &lt;<link url="http://www.itu.int/rec/T-REC-F.700">http://www.itu.int/rec/T-REC-F.700</link>&gt;.</note> for good real-time text. If a different transmission interval needs to be used, the interval SHOULD be <strong>between 0.3 second and 1 second</strong>.</p>
    <p>A longer interval will lead to a less optimal user experience. Conversely, a much shorter interval may more frequently trigger throttling or flooding protection algorithms in public XMPP servers, leading to dropped &lt;message/&gt; elements and/or <link url="#congestion_considerations">Congestion Considerations</link>.</p>
    <p>To provide fluid real-time text, one or more of the following methods can be used:</p>
    <ul>
      <li><link url="#preserving_key_press_intervals">Preserving Key Press Intervals</link> for natural typing display, independently of the transmission interval.</li>
      <li>Use of <link url="#time_critical_and_low_latency_methods">Time Critical And Low Latency Methods</link>, for real-time captioning/transcription.</li>
      <li>For other options or reduced-precision options, see <link url="#reduced_precision_text_smoothing_methods">Reduced Precision Text Smoothing Methods</link>.</li>
    </ul>
    </section2>
    <section2 topic="Real-Time Message Editing" anchor="realtime_message_editing">
    <p>The &lt;rtt/&gt; element MAY contain one or more <em><strong>action elements</strong></em> representing real-time message editing operations, including text being appended, inserted, or deleted.</p>
    <p>Most chat clients allow a sender to edit their message before sending (i.e. via a Send button, or hitting Enter). The inclusion of real-time functionality to existing chat client software must not degrade the sender's existing expectation of being able to edit their messages before sending. Thus, in a chat session with real-time text, the recipient can watch the sender compose and edit their message before it is delivered.</p>
        <section3 topic="Summary of Action Elements" anchor="summary_of_action_elements">
    <p>This is a short summary of action elements that operate on a real-time message. For detailed information, see <link url="#action_elements">Action Elements</link>.</p>
        <table>
          <tr>
            <th>Action</th>
            <th>Element</th>
            <th>Description</th>
          </tr>
          <tr>
            <td>Insert&nbsp;Text</td>
            <td>&lt;t&nbsp;p='#'&gt;text&lt;/t&gt;</td>
            <td>REQUIRED. Insert specified <em><strong>text</strong></em> at position <em><strong>p</strong></em> in message.</td>
          </tr>
          <tr>
            <td>Backspace</td>
            <td>&lt;e&nbsp;p='#'&nbsp;n='#'/&gt;</td>
            <td>REQUIRED. Remove <em><strong>n</strong></em> characters before position <em><strong>p</strong></em> in message<em>.</em></td>
          </tr>
          <tr>
            <td>Forward&nbsp;Delete</td>
            <td>&lt;d&nbsp;p='#'&nbsp;n='#'/&gt;</td>
            <td>REQUIRED. Remove <em><strong>n</strong></em> characters starting at position <em><strong>p</strong></em> in message.</td>
          </tr>
          <tr>
            <td>Interval</td>
            <td>&lt;w&nbsp;n='#'/&gt;</td>
            <td>RECOMMENDED. Execute a pause of <em><strong>n</strong></em> thousandths of a second.</td>
          </tr>
        </table>
    </section3>
    <section3 topic="Rules for Attribute Values" anchor="rules_for_attribute_values">
    <ul>
      <li><p>The <em><strong>n</strong></em> attribute represents a length value. If the <em><strong>n</strong></em> attribute is omitted, the default value for <em><strong>n</strong></em> MUST be 1.</p></li>
      <li><p>The <em><strong>p</strong></em> attribute represents an absolute position value. This is a 0-based index, where 0 represents the first character of the real-time message. If <em><strong>p</strong></em> is omitted, <em><strong>p</strong></em> MUST be treated as the length of the message (points to end of the real-time message).</p></li>
      <li><p>For text modifications, both <em><strong>n</strong></em> and <em><strong>p</strong></em> attributes are based on <link url="#unicode_character_counting">Unicode Character Counting</link>. Also see <link url="#ensuring_accuracy_of_attribute_values">Ensuring Accuracy Of Attribute Values</link>.</p></li>
    </ul>
    </section3>
    <section3 topic="Action Elements" anchor="action_elements">
    <p>Recipients are REQUIRED to support &lt;t/&gt;, &lt;e/&gt; and &lt;d/&gt; action elements for incoming &lt;rtt/&gt; transmissions, even if not all elements are used for outgoing &lt;rtt/&gt; transmissions. Support for &lt;w/&gt; is RECOMMENDED for both senders and recipients in order to accommodate <link url="#preserving_key_press_intervals">Preserving Key Press Intervals</link>. Recipients MUST ignore unexpected or unsupported elements within &lt;rtt/&gt;, while continuing to process subsequent action elements. Action elements are immediate child elements of the &lt;rtt/&gt; element, and are never nested. Examples can be found in <link url="#use_cases">Use Cases</link>.</p>
        <section4 topic="Element &lt;t/&gt; – Insert Text" anchor="element_t_insert_text">
    <p>REQUIRED. Supports the transmission of key presses, text block inserts, and text being pasted.<br />
    <em>Note:</em> <em>Any text normally used in the &lt;body/&gt; element of a &lt;message/&gt; may be used. If the &lt;t/&gt; element is empty, no text modification takes place.</em></p>
    <p><code><![CDATA[<t p='#'>text</t>]]></code></p>
    <p>Inserts specified <em><strong>text</strong></em> at position <em><strong>p</strong></em> in the message text.</p>
    <p><code><![CDATA[<t>text</t>]]></code></p>
    <p>Appends specified <em><strong>text</strong></em> at the end of message. (<em><strong>p</strong></em> defaults to message length)</p>
    </section4>
    <section4 topic="Element &lt;e/&gt; – Backspace" anchor="element_e_backspace">
    <p>REQUIRED. Supports the behavior of Backspace key presses.<br />
    <em>Note: Excess backspaces, at the start of the message, MUST be ignored.</em></p>
    <p><code><![CDATA[<e n='#' p='#'/>]]></code></p>
    <p>Remove <em><strong>n</strong></em> characters before position <em><strong>p</strong></em> in message.</p>
    <p><code><![CDATA[<e p='#'/>]]></code></p>
    <p>Remove 1 character before position <em><strong>p</strong></em> in message. (<em><strong>n</strong></em> defaults to 1)</p>
    <p><code><![CDATA[<e n='#'/>]]></code></p>
    <p>Remove <em><strong>n</strong></em> characters from end of message. (<em><strong>p</strong></em> defaults to message length)</p>
    <p><code><![CDATA[<e/>]]></code></p>
    <p>Remove 1 character from end of message. (Both <em><strong>n</strong></em> and <em><strong>p</strong></em> at default values)</p>
    </section4>
    <section4 topic="Element &lt;d/&gt; – Forward Delete" anchor="element_d_forward_delete">
    <p>REQUIRED. Supports the behavior of Delete key presses, text block deletes, and text being cut.<br />
    <em>Note: Excess deletes, beyond end of message, MUST be ignored.</em></p>
    <p><code><![CDATA[<d p='#' n='#'/>]]></code></p>
    <p>Remove <em><strong>n</strong></em> characters beginning at position <em><strong>p</strong></em> in message.</p>
    <p><code><![CDATA[<d p='#'/>]]></code></p>
    <p>Remove 1 character beginning at position <em><strong>p</strong></em> in message. (<em><strong>n</strong></em> defaults to 1)</p>
    </section4>
    <section4 topic="Element &lt;w/&gt; – Interval" anchor="element_w_interval">
    <p>RECOMMENDED. Allows the transmission of intervals between real-time message edits, such as the pauses between key presses. For more information, see <link url="#preserving_key_press_intervals">Preserving Key Press Intervals</link>.</p>
    <p><code><![CDATA[<w n='#'/>]]></code></p>
    <p>Executes a pause of <em><strong>n</strong></em> thousandths of a second. This pause may be approximate, and not necessarily be of millisecond precision. The <em><strong>n</strong></em> value SHOULD NOT exceed the <link url="#transmission_interval">Transmission Interval</link>. Also, if a <link url="#body_element">Body Element</link> arrives, pauses SHOULD be interrupted to prevent a delay in message delivery.</p>
    </section4>
</section3>
    <section3 topic="Ensuring Accuracy Of Attribute Values" anchor="ensuring_accuracy_of_attribute_values">
    <p>Real-time message edits work only within the boundaries of the current real-time message, and do not affect previous messages. Senders MUST NOT use negative values for any attribute, nor use <em><strong>p</strong></em> values beyond the current message length. However, recipients receiving such values MUST clip negative values to 0, and clip excessively high <em><strong>p</strong></em> values to the current message length.</p>
    <p>For senders, <em><strong>p</strong></em> and <em><strong>n</strong></em> values are calculated relative to the plain text version of the message. This is the message otherwise normally transmitted in a &lt;body/&gt; element after all processing is complete, including emoticon graphics as plain text. For recipients, <em><strong>p</strong></em> and <em><strong>n</strong></em> are calculated relative to the message text immediately after XML processing, and before any further processing.</p>
    <p>Regardless of the original format of line breaks during XMPP transmission, line breaks are treated as a single code point (LINE FEED U+000A). Conversion of line breaks into a single line feed is REQUIRED for XML processors, according to section 2.11 of <span class="ref"><strong><link url="http://www.w3.org/TR/xml/">XML</link></strong></span> <note>XML: Extensible Markup Language 1.0 (Fifth Edition). &lt;<link url="http://www.w3.org/TR/xml/">http://www.w3.org/TR/xml/</link>&gt;.</note>, so a compliant XML processor already do this automatically, and already provide the correct original Unicode text for interoperability.</p>
    </section3>
    <section3 topic="Unicode Character Counting" anchor="unicode_character_counting">
    <p>For platform-independent interoperability, calculations of <em><strong>p</strong></em> and <em><strong>n</strong></em> values MUST be based on Unicode code points. Different platforms use different internal Unicode encodings, which may be different from the transmission encoding (UTF-8) for XMPP. Consider these factors:</p>
    <ul>
      <li><p>Multiple Unicode code points may represent one displayable Unicode glyph (i.e. combining marks).<br />
        <em>Action elements operate on Unicode code points, not on displayable character glyphs.</em></p></li>
      <li><p>Characters U+10000 through U+1FFFF, which are single code points, but are represented as multiple surrogate code units in certain Unicode encodings (i.e. UTF-16).<br />
        <em>Action elements operate on Unicode code points, not on individual surrogate code units.</em></p></li>
      <li><p>Some Unicode encodings use a variable number of bytes per Unicode character (i.e. UTF-8).<br /><em>Action elements operate on Unicode code points, not on individual bytes.</em></p></li>
    </ul>
    <p>Incorrectly calculated <em><strong>p</strong></em> and <em><strong>n</strong></em> values may cause scrambled text during real-time message editing for many languages. This scrambled text persists until full message delivery, or <link url="#message_retransmission">Message Retransmission</link>. From the perspective of <em><strong>p</strong></em> and <em><strong>n</strong></em> values, a real-time message is treated equivalent to an editable array of Unicode code points, even if not necessarily stored as such.</p>
    </section3>
</section2>
    <section2 topic="Automatic Recovery of Real-Time Text" anchor="automatic_recovery_of_realtime_text">
    <p>In a chat session with real-time text, it is critical that the real-time message is identical on both the sender and recipient ends. The loss of a single &lt;rtt/&gt; transmission can represent missing text, or a missing edit. This leads to the real-time message getting out of sync. Recovery of in-progress real-time message is useful in several situations:</p>
    <ul>
      <li>Disconnect and reconnection (i.e. intentional, unintentional, wireless reception, servers, etc.)</li>
      <li>XMPP servers may drop &lt;message/&gt; elements automatically (i.e. flooding protection).</li>
      <li>Multiple <link url="#simultaneous_logins">Simultaneous Logins</link>. (i.e. additional clients logging in, recipient switching computers)</li>
    </ul>
        <section3 topic="Staying In Sync" anchor="staying_in_sync">
    <p>To stay synchronized, for &lt;rtt/&gt; elements that do not contain an 'event' attribute:</p>
    <ol>
      <li>The sender MUST increment the <strong>seq</strong> attribute for consecutive &lt;rtt/&gt; element.</li>
      <li>The recipient MUST monitor the <strong>seq</strong> attribute value of received &lt;rtt/&gt; elements, to verify that it is incrementing.</li>
      <li>The seq values for incoming messages, versus outgoing messages, are independent and kept track of separately.</li>
    </ol>
    </section3>
    <section3 topic="Detecting Loss of Sync" anchor="detecting_loss_of_sync">
    <p>The sync is considered lost if the <strong>seq</strong> attribute of the &lt;rtt/&gt; element does not increment as expected. Trying to process certain action elements, after loss of sync, can result in scrambled text. Therefore, to avoid this situation:</p>
    <ol>
      <li>The recipient MUST stop processing all subsequent action elements, and pause the current real-time message.</li>
      <li>An indicator MAY be used by the recipient to indicate the loss of sync. (i.e. reception bars, color code, missing text indicator, chat state message)</li>
    </ol>
    </section3>
    <section3 topic="Recovery From Loss of Sync" anchor="recovery_from_loss_of_sync">
    <p>Recovery occurs when any of the following happens:</p>
    <ol>
      <li>A message &lt;body/&gt; is delivered. The <link url="#body_element">Body Element</link> replaces the real-time message.</li>
      <li>The <strong>event</strong> attribute of &lt;rtt/&gt; has a value of <strong>new</strong> or <strong>reset</strong>. Processing of real-time MUST restart, with the new starting <strong>seq</strong> value obtained from this &lt;rtt/&gt; element.</li>
    </ol>
    </section3>
    <section3 topic="Message Retransmission" anchor="message_retransmission">
    <p>In order to prevent recipients from waiting for <link url="#recovery_from_loss_of_sync">Recovery From Loss of Sync</link>, senders SHOULD retransmit the contents of a partially-composed message, in the following situations:</p>
    <ul>
      <li>When the recipient's presence changes. (i.e. offline to online)</li>
      <li>When the recipient sends a &lt;message/&gt; from a different full JID than before. (i.e. <link url="#simultaneous_logins">Simultaneous Logins</link>)</li>
      <li>At regular intervals, to allow recovery from unexpected situations such as lost &lt;message/&gt; stanzas.</li>
    </ul>
    <p>A message retransmit is done using the &lt;rtt/&gt; attribute <strong>event='reset'</strong> (see <link url="#rtt_attributes">RTT Attributes</link>).</p>
    <p><code><![CDATA[<rtt event='reset' seq='#' xmlns='urn:xmpp:rtt:0'>
  <t>This is a retransmission of the entire real-time message.</t>
</rtt>]]></code></p>
    <p>Retransmission SHOULD be done at a regular interval of 10 seconds, unless there are no message changes. This interval is frequent enough to minimize user waiting time, while being infrequent enough to reduce bandwidth overhead. This interval MAY vary in order to reduce average bandwidth requirements for minor message changes and/or for long messages.</p>
    </section3>
</section2>
</section1>
    <section1 topic="Determining Support" anchor="determining_support">
    <p>If a client supports this real-time text protocol, it MUST advertise that fact in its responses via &xep0030; information ("disco#info") requests by returning a feature of <strong>urn:xmpp:rtt:0</strong></p>
    <p><strong>Example 1. A disco#info query</strong></p>
    <p><code><![CDATA[<iq from='romeo@montague.lit/orchard'
    id='disco1'
    to='juliet@capulet.lit/balcony'
    type='get'>
  <query xmlns='http://jabber.org/protocol/disco#info'/>
</iq>

]]></code></p>
    <p><strong>Example 2. A disco#info response</strong></p>
    <p><code><![CDATA[<iq from='juliet@capulet.lit/balcony'
    id='disco1'
    to='romeo@montague.lit/orchard'
    type='result'>
  <query xmlns='http://jabber.org/protocol/disco#info'>
    <feature var='urn:xmpp:rtt:0'/>
  </query>
</iq>

]]></code></p>
    <p>If this successful response of <strong>&lt;feature var='urn:xmpp:rtt:0'/&gt;</strong> is not received, the client SHOULD NOT transmit any outgoing &lt;rtt/&gt; elements in &lt;message/&gt; transmissions. This avoids unnecessary consumption of bandwidth to clients that do not support this protocol.</p>
    </section1>
    <section1 topic="Implementation Notes" anchor="implementation_notes">
        <section2 topic="Text Presentation" anchor="text_presentation">
        <section3 topic="Avoid Bursty Text Presentation" anchor="avoid_bursty_text_presentation">
    <p>If a long <link url="#transmission_interval">Transmission Interval</link> is used without <link url="#preserving_key_press_intervals">Preserving Key Press Intervals</link>, then text will appear in intermittent bursts if the display of text is not smoothed. This hurts user experience of real-time text.</p>
    </section3>
    <section3 topic="Preserving Key Press Intervals" anchor="preserving_key_press_intervals">
    <p>For the highest quality display of text being typed, using <link url="#element_w_interval">Element &lt;w/&gt; – Interval</link> allows the original look-and-feel of typing to be preserved, independently of the transmission interval. Using the &lt;w/&gt; element, the sender can record multiple key presses including key press intervals, and transmit them over the XMPP network in a single &lt;message/&gt;. The recipient can then play back the sender's typing in real-time at original typing speed including the intervals between key presses.</p>
    <p>Much like VoIP is a packetization of sound, this spec enables packetization of typing including the original key press intervals. This enables the real-time feel of typing over virtually any network connection, without requiring frequent transmission intervals. Look and feel of typing is also preserved over variable latency connections including &xep0206;, mobile phone, satellite and long international connections with heavy packet-bursting tendencies.</p>
    <p>The recipient can watch the sender fluidly compose/edit their message in real-time without any “bursting” effects. This is “Natural Typing”, and appears indistinguishable from local typing. When key press intervals are preserved at high precision, all subtleties of typing are preserved, including the 'mood' (calm typing versus panicked or emphatic typing, etc). For an example transmission of key intervals, see <link url="#full_message_including_key_press_intervals">Full Message Including Key Press Intervals</link>.</p>
    </section3>
    <section3 topic="Time Critical And Low Latency Methods" anchor="time_critical_and_low_latency_methods">
    <p>There are specialized situations such as live transcriptions and captioning (i.e. transcription service, closed captioning provider, captioned telephone, relay services, Remote CART) that demands low latency transmission. Such systems typically use voice recognition and/or stenotype machines, which output text in word bursts rather than a character at a time. Senders with bursty output MAY immediately transmit word bursts of text without buffering. This eliminates any lag caused by the <link url="#transmission_interval">Transmission Interval</link>. It is NOT REQUIRED to monitor or transmit <link url="#element_w_interval">Element &lt;w/&gt; – Interval</link> for transcription. If additional accuracy is required, it is also possible to timecode the &lt;rtt/&gt; elements.</p>
    </section3>
    <section3 topic="Reduced Precision Text Smoothing Methods" anchor="reduced_precision_text_smoothing_methods">
    <p>Some software platforms (i.e. JavaScript, BOSH, mobile devices, etc.) may have low-precision timers that impact <link url="#transmission_interval">Transmission Interval</link> and/or <link url="#preserving_key_press_intervals">Preserving Key Press Intervals</link>. Clients MAY optimize for bandwidth, performance and/or screen repaints by eliminating, merging, or ignoring <link url="#element_w_interval">Element &lt;w/&gt; – Interval</link> selectively, especially those containing shorter intervals. The transmission interval of &lt;rtt/&gt; MAY also vary, either intentionally for optimizations, or due to precision limitation.</p>
    <p>Clients MAY choose to implement alternate text-smoothing methods, such as adaptive-rate character-at-a-time output, and/or word buffering for incoming real-time text. Word buffering prevents most typing mistakes from being displayed, which can be a useful mode of operation for certain recipients who may dislike watching the sender's typing mistakes.</p>
    </section3>
</section2>
    <section2 topic="Real-Time Transmission" anchor="realtime_transmission">
        <section3 topic="Monitoring Message Edits" anchor="monitoring_message_edits">
    <p>For sending clients, there are several potential methods of capturing typing and message edits, in order to generate action elements for an &lt;rtt/&gt; transmission. However, instead of monitoring key presses directly, the most reliable and practical method is to monitor the <strong>text changes</strong> to the local message text field:</p>
    <ul>
      <li>it captures all typing, including edits and deletes.</li>
      <li>it captures cut &amp; paste operations, as well as edits made via a pointing device.</li>
      <li>it captures automatic text changes, such as done by spell checker, macros, assistive devices, etc.</li>
      <li>it captures accented characters, Chinese, Arabic and other characters that require multiple key presses to compose.</li>
      <li>it makes no assumptions about different keyboards or input entry methods.</li>
      <li>text change events are more cross-platform portable, including on mobile phones.</li>
    </ul>
    <p>In a text change event, the current message string can be compared to the previous message string in order to calculate what text changes took place. The appropriate action elements are then generated, to represent text insertions and deletions. If <link url="#preserving_key_press_intervals">Preserving Key Press Intervals</link> are supported, then the interval is implemented as the time elapsed between text change events. For additional information, see <link url="#action_elements">Action Elements</link> and <link url="#rules_for_attribute_values">Rules for Attribute Values</link>. The following guidelines are for clients that use keyboard input.</p>
    </section3>
    <section3 topic="Guidelines for Senders" anchor="guidelines_for_senders">
    <ul>
      <li><p>Monitor typing via the technique in <link url="#monitoring_message_edits">Monitoring Message Edits</link> to generate action elements, and add these action elements to a buffer. This is equivalent to recording a small sequence of typing.</p></li>
      <li><p>During every <link url="#transmission_interval">Transmission Interval</link>, all buffered action elements are transmitted in &lt;rtt/&gt; element of a &lt;message/&gt;. This is equivalent to transmitting a small sequence of typing at a time.</p></li>
      <li><p>If there are no changes to the real-time message, then no unnecessary &lt;rtt/&gt; transmission takes place.</p></li>
    </ul>
    </section3>
    <section3 topic="Guidelines for Receivers" anchor="guidelines_for_receivers">
    <ul>
      <li><p>Upon receipt of a &lt;message/&gt; containing an &lt;rtt/&gt; element, the action elements in &lt;rtt/&gt; are added to a queue, in the order that they are received. This provides immunity to variable network conditions, since the buffering action smooths out the latency fluctuations of &lt;message/&gt; delivery.</p></li>
      <li><p>The recipient software should interpret the action elements in the playback queue in sequential order, including &lt;w/&gt; elements (intervals), into a real-time message. This is equivalent to playing back the sender's original typing, including key press intervals.</p></li>
      <li><p>Processing of intervals (&lt;w/&gt; elements) SHOULD be done via non-blocking programming techniques.</p></li>
      <li><p>Upon receiving a &lt;message/&gt; containing &lt;body/&gt; indicating a completed message, the full message SHOULD be displayed immediately in place of the real-time message, and unprocessed action elements cleared from the playback queue. This ensures final message delivery is not delayed by late processing of action elements.</p></li>
      <li><p>If support for the &lt;w/&gt; element is not possible, receiving software SHOULD use an alternate text-smoothing method. See <link url="#reduced_precision_text_smoothing_methods">Reduced Precision Text Smoothing Methods</link> for more info.</p></li>
      <li><p>If the playback queue contains too much delay in &lt;w/&gt; elements (i.e. &lt;w/&gt; elements from two &lt;rtt/&gt; transmissions ago), the recipient client MAY ignore or shorten the intervals of &lt;w/&gt; elements, to allow lagged real-time text to "catch up" more quickly.</p></li>
    </ul>
    </section3>
</section2>
    <section2 topic="Optional Remote Cursor" anchor="optional_remote_cursor">
    <p>Recipient clients MAY choose to display a cursor (or caret) within incoming real-time messages. This enhances usability of real-time text further, since it becomes easier for a recipient to observe the sender's real-time message edits. Recipient clients that do not support a remote cursor, can simply ignore calculating a cursor position, and skip this section.</p>
        <section3 topic="Calculating Cursor Position" anchor="calculating_cursor_position">
    <p>All action elements always have absolute cursor positioning. When &lt;t/&gt;, &lt;e/&gt;, or &lt;d/&gt; action elements are processed in incoming real-time text, the beginning value for the cursor position calculation is the absolute position value of the <em><strong>p</strong></em> attribute, according to <link url="#rules_for_attribute_values">Rules for Attribute Values</link>. The cursor position immediately after an action element, is calculated as follows:</p>
    <ul>
      <li><p>After <link url="#element_t_insert_text">Element &lt;t/&gt; – Insert Text</link>, the cursor position is the <em><strong>p</strong></em> attribute plus the length of the text being inserted. The cursor position is put at the end of inserted text.<br />
        <em>This mimics normal forward cursor movement during text insertion.</em></p></li>
      <li><p>After <link url="#element_e_backspace">Element &lt;e/&gt; – Backspace</link>, the cursor position is the <em><strong>p</strong></em> attribute minus the <em><strong>n</strong></em> attribute. If the <em><strong>n</strong></em> value is greater than <em><strong>p</strong></em>, then cursor position becomes 0.<br />
        <em>This mimics normal cursor response to a Backspace key.</em></p></li>
      <li><p>After <link url="#element_d_forward_delete">Element &lt;d/&gt; – Forward Delete</link>, the cursor position is the <em><strong>p</strong></em> attribute, unaffected by the <em><strong>n</strong></em> attribute.<br />
        <em>This mimics normal cursor response to a Delete key.</em></p></li>
      <li><p>After an empty <link url="#element_t_insert_text">Element &lt;t/&gt; – Insert Text</link> (in the format of <strong>&lt;t p='#'/&gt;</strong> with no text to insert), the cursor position is the <strong>p</strong> attribute, and no text modification is done.<br /><em>This allows cursor response to arrow keys and/or mouse repositioning the cursor.</em></p></li>
    </ul>
    <p>The remote cursor SHOULD be clearly distinguishable from the sender's real local cursor. One example is to use a non-blinking cursor, easily emulated with a Unicode character or the vertical bar character '|'.</p>
    </section3>
    <section3 topic="Guidelines for Senders" anchor="_guidelines_for_senders">
    <p>Whenever the cursor is moving without any text modifications (via arrow keys or mouse), the sender MAY transmit extra <link url="#element_t_insert_text">Element &lt;t/&gt; – Insert Text</link> with an empty string to update the remote cursor position via attribute <em><strong>p</strong></em>. This maintains accurate positioning for the remote cursor in recipients that support a remote cursor. These extra elements are ignored by recipients that do not support a remote cursor.</p>
    <p>Monitoring the actual cursor position may need to be done via a “selection changed” event of a text box field in many programming platforms. This event typically monitors text marking/selection operations, and doubles as the event for monitoring the cursor position.</p>
    </section3>
</section2>
    <section2 topic="Other Guidelines" anchor="other_guidelines">
    <p><link name="_Hlk168620696"></link>There are other special basic considerations for real-time message transmissions that need to be considered by implementors.</p>
        <section3 topic="Message Length Limit" anchor="message_length_limit">
    <p>A large sequence of rapid message changes may generate a large series of action elements in an &lt;rtt/&gt; element, resulting in the &lt;message/&gt; exceeding the XMPP server's maximum allowed length of a &lt;message/&gt; stanza. This may result in dropped messages. It is acceptable to simply retransmit the whole real-time message using &lt;rtt event='reset'/&gt; if the length of the &lt;rtt/&gt; element would otherwise exceed the application's maximum chat message length.</p>
    <p>For long messages, the final &lt;rtt/&gt; transmission may be made in a separate &lt;message/&gt; than the &lt;message/&gt; containing the &lt;body/&gt;. For example:</p>
    <p><code><![CDATA[<message to='alice@example.com' from='bob@example.com/home' type='chat' id='dda'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='95'>
    <t>Hello World...In a Super Long Message! [etc]</t>
  </rtt>
  <body>Hello World...In a Super Long Message! [etc]</body>
</message>]]></code></p>



    <p>The message MAY be split into two separate message transmissions:</p>
    <p><code><![CDATA[<message to='alice@example.com' from='bob@example.com/home' type='chat' id='dda'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='95'>
    <t>Hello World...In a Super Long Message! [etc]</t>
  </rtt>
</message>

<message to='alice@example.com' from='bob@example.com/home' type='chat' id='ddb'>
  <body>Hello World...In a Super Long Message! [etc]</body>
</message>]]></code></p>
    </section3>
    <section3 topic="Usage With Chat States" anchor="usage_with_chat_states">
    <p>Real-time text MAY be accompanied with XEP-0085 &xep0085;. These are simple guidelines for &lt;message/&gt; stanzas that include an &lt;rtt/&gt; element:</p>
    <ul>
      <li>For &lt;rtt/&gt; transmitted without an accompanying &lt;body/&gt;, include &lt;composing/&gt; chat state.</li>
      <li>For &lt;rtt/&gt; transmitted with an accompanying &lt;body/&gt;, include the &lt;active/&gt; chat state.</li>
      <li>Other chat states are handled as specified by XEP-0085 Chat States.</li>
    </ul>
    </section3>
    <section3 topic="Usage With Multi-User Chat and Simultaneous Logins" anchor="usage_with_multiuser_chat_and_simultaneous_logins">
    <p>The in-band nature of this real-time text standard allows one-to-many situations. Thus, real-time text is compatible with &xep0045; (MUC), as well as concurrent simultaneous logins. Support for real-time text in MUC is OPTIONAL, and is fully <link url="#backwards_compatible">Backwards Compatible</link> with group chat participants that do not support real-time text.</p>
        <section4 topic="Multi-User Chat" anchor="multiuser_chat">
    <p>For MUC, the <link url="#rtt_element">RTT Element</link> <link url="#event">event</link> attribute value of 'cancel' SHOULD NOT be used. This prevents one participant from suppressing real-time text for all participants in a group chat. Participants that turn off real-time text for themselves, can simply ignore incoming &lt;rtt/&gt; and not transmitting outgoing &lt;rtt/&gt;. Participant clients without real-time text (whether unsupported or turned off) will simply see group chat function normally on a line-by-line basis. Participants that enable real-time text during group chat, need to keep track of separate real-time messages on a per-participant basis, via full JID. As a result, participants with real-time text, will see real-time text coming from each participant that have real-time text enabled. Software MAY hide idle real-time messages to minimize on-screen clutter when more than one person is typing. Congestion control MAY also be used, via automatic adjustment of <link url="#transmission_interval">Transmission Interval</link>, see <link url="#congestion_considerations">Congestion Considerations</link>.</p>
    </section4>
    <section4 topic="Simultaneous Logins" anchor="simultaneous_logins">
    <p>In simultaneous login situations, transmitting of &lt;rtt/&gt; works in one-to-many situations without any special software support. For many-to-one situations where there is incoming &lt;rtt/&gt; from more than one simultaneous login, the existing <link url="#automatic_recovery_of_realtime_text">Automatic Recovery of Real-Time Text</link> already catches this situation until there is only one typist. A good implementation of <link url="#message_retransmission">Message Retransmission</link> will improve user experience, regardless of whether or not XEP-0296 is used (&xep0296;). Alternatively, clients MAY choose to improve on this behavior, by keeping track of multiple separate real-time messages per full JID, similar to <link url="#multiuser_chat">Multi-User Chat</link>.</p>
    </section4>
</section3>
    <section3 topic="Performance &amp; Efficiency" anchor="performance_efficiency">
    <p>With real-time text, frequent screen updates may occur. Screen updates are a potential performance bottleneck, because fast typists type many key presses per second. Optimizing screen updates becomes especially important for slower platforms. Real-time messages should be updated efficiently in a flicker-free manner. Alternatively, to improve performance, the display of real-time messages may be implemented as a separate window or separate display element.</p>
    <p>Battery life considerations are closely related to performance, as the addition of real-time text may impact battery life. If <link url="#preserving_key_press_intervals">Preserving Key Press Intervals</link> are supported, then the implementation of <link url="#element_w_interval">Element &lt;w/&gt; – Interval</link> should be implemented in a battery-efficient manner. The <link url="#transmission_interval">Transmission Interval</link> may vary dynamically to optimize for battery life and wireless reception. For devices where screen updates are an unavoidable inefficient bottleneck, see <link url="#reduced_precision_text_smoothing_methods">Reduced Precision Text Smoothing Methods</link> to reduce the number of screen updates per second. Also see &xep0286;.</p>
    </section3>
    <section3 topic="Total Conversation – Combination With Audio And Video" anchor="total_conversation_combination_with_audio_and_video">
    <p>According to ITU-T Rec. F.703, the “Total Conversation” accessibility standard defines the simultaneous use of audio, video, and real-time text. For convenience, chat applications may be designed to have automatic negotiation of as many as possible of the three media preferred by the users.</p>
    <p>In the XMPP session environment, the Jingle protocol (&xep0166;) is available for negotiation and transport of the more time-critical, real-time audio and video media. Any combination of audio, video, and real-time text MAY be used together simultaneously.</p>
    </section3>
</section2>
</section1>
    <section1 topic="Use Cases" anchor="use_cases">
    <p>Most of these examples are deliberately kept simple. In software implementations supporting key press intervals, transmissions will most resemble the last example, <link url="#full_message_including_key_press_intervals">Full Message Including Key Press Intervals</link>.</p>
        <section2 topic="Three Backspaces" anchor="three_backspaces">
    <p><code><![CDATA[<message to='bob@example.com' from='alice@example.com/home' id='a01' type='chat'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>Hello bcak</t><e/><e/><e/><t>ack</t>
  </rtt>
</message>]]></code></p>



    <p>Resulting real-time message: "<strong>Hello back</strong>"<br />
    This code sends the misspelled "<strong>Hello bcak</strong>", then <strong>&lt;e/&gt;&lt;e/&gt;&lt;e/&gt;</strong> backspaces 3 times, then sends "<strong>ack</strong>".</p>
    </section2>
    <section2 topic="Three Backspaces In One Action Element" anchor="three_backspaces_in_one_action_element">
    <p><code><![CDATA[<message to='bob@example.com' from='alice@example.com/home' type='chat' id='a01'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>Hello bcak</t><e n='3'/><t>ack</t>
  </rtt>
</message>]]></code></p>



    <p>Resulting real-time message: "<strong>Hello back</strong>"<br />
    This code is the same as the previous example, demonstrating that <strong>&lt;e n='3'/&gt;</strong> does the same thing as <strong>&lt;e/&gt;&lt;e/&gt;&lt;e/&gt;</strong>.</p>
    </section2>
    <section2 topic="Message Edits Split Into Multiple Transmissions" anchor="message_edits_split_into_multiple_transmissions">
    <p><code><![CDATA[<message to='bob@example.com' from='alice@example.com/home' type='chat' id='a01'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>Hello</t>
  </rtt>
</message>

<message to='bob@example.com' from='alice@example.com/home' type='chat' id='b02'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='1'>
    <t> bcak</t>
  </rtt>
</message>

<message to='bob@example.com' from='alice@example.com/home' type='chat' id='c03'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='2'>
    <e n='3'/>
  </rtt>
</message>

<message to='bob@example.com' from='alice@example.com/home' type='chat' id='d04'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='3'>
    <t>ack</t>
  </rtt>
</message>]]></code></p>



    <p>Resulting real-time message: "<strong>Hello back</strong>"<br />
    This code results in the same final text as the previous two examples, segmented into four separate messages.</p>
    </section2>
    <section2 topic="Deleting Text From Message" anchor="deleting_text_from_message">
    <p><code><![CDATA[<message to='bob@example.com' from='alice@example.com/home' type='chat' id='a01'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>Hello Bob, this is Alice!</t><d n='4' p='5'/>
  </rtt>
</message>]]></code></p>



    <p>Resulting real-time message: "<strong>Hello, this is Alice!</strong>"<br />
    This code outputs "<strong>Hello Bob, this is Alice!</strong>" then <strong>&lt;d n='4' p='5'/&gt;</strong> deletes 4 characters from position 5.<br />
    (This erases the text " <strong>Bob</strong>" including the preceding space character).</p>
    </section2>
    <section2 topic="Inserting Text Into Message" anchor="inserting_text_into_message">
    <p><code><![CDATA[<message to='bob@example.com' from='alice@example.com/home' type='chat' id='a01'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>Hello, this is Alice!</t><t p='5'> Bob</t>
  </rtt>
</message>]]></code></p>



    <p>Resulting real-time message: "<strong>Hello Bob, this is Alice!</strong>"<br />
    This is because the code outputs "<strong>Hello, this is Alice!</strong>" then the <strong>&lt;t p='5'&gt;</strong> inserts the specified text " <strong>Bob</strong>" at position 5.</p>
    </section2>
    <section2 topic="Deleting And Replacing Text In Message" anchor="deleting_and_replacing_text_in_message">
    <p><code><![CDATA[<message to='bob@example.com' from='alice@example.com/home' type='chat' id='a01'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>Hello Bob, tihsd is Alice!</t>
    <d p='11' n='5'/>
    <t p='11'>this</t>
  </rtt>
</message>]]></code></p>



    <p>Resulting real-time message: "<strong>Hello Bob, this is Alice!</strong>"<br />
    This code outputs "<strong>Hello Bob, tihsd is Alice!</strong>", then <strong>&lt;d p='11' n='5'/&gt;</strong> deletes 5 characters at position 11 in the string of text. (erases the mistyped word "<strong>tihsd</strong>"). Finally, <strong>&lt;t p='11'&gt;this&lt;/t&gt;</strong> inserts the text "<strong>this</strong>" place of the original misspelled word.</p>
    </section2>
    <section2 topic="Multiple Message Edits" anchor="multiple_message_edits">
    <p>This is an example message containing multiple consecutive real-time message edits.</p>
    <p><code><![CDATA[<message to='bob@example.com' from='alice@example.com/home' type='chat' id='a01'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>Helo</t>
    <e/>
    <t>lo...planet</t>
    <e n='6'/>
    <t> World</t>
    <d n='3' p='5'/>
    <t p='5'> there,</t>
  </rtt>
</message>]]></code></p>



    <p>Resulting real-time message: "<strong>Hello there, World</strong>", completed in the following series of steps:</p>
        <table>
          <tr>
            <th>Element</th>
            <th>Action</th>
            <th>Real -Time&nbsp;Message</th>
            <th>Cursor&nbsp;Pos</th>
          </tr>
          <tr>
            <td>&lt;t&gt;Helo&lt;/t&gt;</td>
            <td>Output&nbsp;"Helo"</td>
            <td>Helo</td>
            <td>4</td>
          </tr>
          <tr>
            <td>&lt;e/&gt;</td>
            <td>Backspace&nbsp;1&nbsp;character&nbsp;from&nbsp;end&nbsp;of&nbsp;line.</td>
            <td>Hel</td>
            <td>3</td>
          </tr>
          <tr>
            <td>&lt;t&gt;lo...planet&lt;/t&gt;</td>
            <td>Output&nbsp;"lo...planet"&nbsp;at&nbsp;end&nbsp;of&nbsp;line.</td>
            <td>Hello...planet</td>
            <td>14</td>
          </tr>
          <tr>
            <td>&lt;e&nbsp;n='6'/&gt;</td>
            <td>Backspace&nbsp;6&nbsp;characters&nbsp;from&nbsp;end&nbsp;of&nbsp;line</td>
            <td>Hello...</td>
            <td>8</td>
          </tr>
          <tr>
            <td>&lt;t&gt;&nbsp;World&lt;/t&gt;</td>
            <td>Output&nbsp;"&nbsp;World"&nbsp;at&nbsp;end&nbsp;of&nbsp;line.</td>
            <td>Hello...&nbsp;World</td>
            <td>14</td>
          </tr>
          <tr>
            <td>&lt;d&nbsp;n='3'&nbsp;p='5'/&gt;</td>
            <td>Delete&nbsp;3&nbsp;characters&nbsp;at&nbsp;position&nbsp;5</td>
            <td>Hello&nbsp;World</td>
            <td>5</td>
          </tr>
          <tr>
            <td>&lt;t&nbsp;p='5'&gt;&nbsp;there,&lt;/t&gt;</td>
            <td>Output&nbsp;"&nbsp;there,"&nbsp;at&nbsp;position&nbsp;5</td>
            <td>Hello&nbsp;there,&nbsp;World</td>
            <td>12</td>
          </tr>
        </table>
    <p>Normally, the action elements are split into multiple separate transmissions. This example also does not illustrate <link url="#preserving_key_press_intervals">Preserving Key Press Intervals</link>. The Cursor Pos column is only relevant if the <link url="#optional_remote_cursor">Optional Remote Cursor</link> is implemented.</p>
    </section2>
    <section2 topic="Three Consecutive Messages" anchor="three_consecutive_messages">
    <p>Representing a short chat session of three separate messages:<br />
    Bob says: "Hello Alice"<br />
    Bob says: "This is Bob"<br />
    Bob says: "How are you?"</p>
    <p><code><![CDATA[<message to='alice@example.com' from='bob@example.com/home' type='chat' id='a01'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>Hello</t>
  </rtt>
</message>

<message to='alice@example.com' from='bob@example.com/home' type='chat' id='b02'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='1'>
    <t> Alice</t>
  </rtt>
  <body>Hello Alice</body>
</message>

<message to='alice@example.com' from='bob@example.com/home' type='chat' id='c03'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='2' event='new'>
    <t>This i</t>
  </rtt>
</message>

<message to='alice@example.com' from='bob@example.com/home' type='chat' id='d04'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='3'>
    <t>s Bob</t>
  </rtt>
  <body>This is Bob</body>
</message>

<message to='alice@example.com' from='bob@example.com/home' type='chat' id='e05'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='4' event='new'>
    <t>How a</t>
  </rtt>
</message>

<message to='alice@example.com' from='bob@example.com/home' type='chat' id='f06'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='5'>
    <t>re yo</t>
  </rtt>
</message>

<message to='alice@example.com' from='bob@example.com/home' type='chat' id='g07'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='6'>
    <t>u?</t>
  </rtt>
  <body>How are you?</body>
</message>]]></code></p>



    <p>This example also illustrates the following:</p>
    <ul>
      <li>The <strong>type</strong> attribute equals 'new' for the start of every new message.</li>
      <li>The <strong>seq</strong> attribute always increments.</li>
    </ul>
    </section2>
    <section2 topic="Full Message Including Key Press Intervals" anchor="full_message_including_key_press_intervals">
    <p>This example is a transmission of “Hello there!” while <link url="#preserving_key_press_intervals">Preserving Key Press Intervals</link>. It illustrates a four-second typing sequence:</p>
    <ul>
      <li>The misspelled phrase “Hello tehre!” is typed;</li>
      <li>Three cursor-left movements back to the typing mistake;</li>
      <li>Two backspaces to delete the typing mistake;</li>
      <li>Two correct key presses to correctly spell the word “there”.</li>
    </ul>
    <p>In between each key press, is <link url="#element_w_interval">Element &lt;w/&gt; – Interval</link> to allow the receiving client execute a small pause between action elements, which allows the playback of the typing at its original look-and-feel.</p>
    <p><code><![CDATA[<message to='bob@example.com' from='alice@example.com/home' type='chat' id='a01'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='0' event='new'>
    <t>H</t>
    <w n='115'/><t>e</t>
    <w n='154'/><t>l</t>
    <w n='151'/><t>l</t>
    <w n='115'/><t>o</t>
    <w n='165'/>
  </rtt>
</message>

<message to='bob@example.com' from='alice@example.com/home' type='chat' id='b02'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='1'>
    <w n='40'/><t> </t>
    <w n='161'/><t>t</t>
    <w n='137'/><t>e</t>
    <w n='135'/><t>h</t>
    <w n='134'/><t>r</t>
    <w n='93'/>
  </rtt>
</message>

<message to='bob@example.com' from='alice@example.com/home' type='chat' id='c03'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='2'>
    <w n='109'/><t>e</t>
    <w n='115'/><t>!</t>
    <w n='330'/><t p='11'/>
    <w n='108'/><t p='10'/>
    <w n='38'/>
  </rtt>
</message>

<message to='bob@example.com' from='alice@example.com/home' type='chat' id='d04'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='3'>
    <w n='109'/><t p='9'/>
    <w n='111'/><e p='9'/>
    <w n='106'/><e p='8'/>
    <w n='138'/><t p='7'>h</t>
    <w n='209'/><t p='8'>e</t>
    <w n='27'/>
  </rtt>
</message>

<message to='bob@example.com' from='alice@example.com/home' type='chat' id='d04'>
  <rtt xmlns='urn:xmpp:rtt:0' seq='4'>
    <w n='445'/><t p='12'>
  </rtt>
  <body>Hello there!</body>
</message>]]></code></p>



    <p>This example also illustrate the following:</p>
    <ul>
      <li>Typing is done via the REQUIRED <link url="#element_t_insert_text">Element &lt;t/&gt; – Insert Text</link>.</li>
      <li>Backspaces are done via the REQUIRED <link url="#element_e_backspace">Element &lt;e/&gt; – Backspace</link>.</li>
      <li>There is a final transmission with a <link url="#body_element">Body Element</link>, when the message is finished.</li>
      <li>Intervals between key presses are done via the RECOMMENDED <link url="#element_w_interval">Element &lt;w/&gt; – Interval</link>.</li>
      <li>Each &lt;message/&gt; is delivered every 0.7 seconds, the default RECOMMENDED <link url="#transmission_interval">Transmission Interval</link>.</li>
      <li>These action elements are generated automatically via <link url="#monitoring_message_edits">Monitoring Message Edits</link> RECOMMENDED method.</li>
      <li>Cursor movements are done via empty &lt;t/&gt; elements, for an <link url="#optional_remote_cursor">Optional Remote Cursor</link>.</li>
      <li>In order to maximize precision, and achieve the smoothest playback of typing, the total sum of all values in <link url="#element_w_interval">Element &lt;w/&gt; – Interval</link> in one &lt;message/&gt; equal the <link url="#transmission_interval">Transmission Interval</link> during periods of continuous typing. This also results in some &lt;w/&gt; interval elements being split between consecutive messages.</li>
    </ul>
    </section2>
</section1>
    <section1 topic="Interoperability Considerations" anchor="interoperability_considerations">
    <p>There are other real-time text formats with interoperability considerations relating to the session setup level, the media transport level, and presentation level. For each environment where interoperability is supported, an interoperability specification should be documented that covers addressing, session control, media negotiation and media transcoding.</p>
        <section2 topic="Other Real-Time Text Standards" anchor="other_realtime_text_standards">
    <p>It is noted there is also another real-time text standard (RFC 4103, <span class="ref"><strong><link url="http://tools.ietf.org/html/rfc5194">IETF RFC 5194</link></strong></span> <note>IETF RFC 5194: Framework for Real-Time Text over IP Using the Session Initiation Protocol (SIP). &lt;<link url="http://tools.ietf.org/html/rfc5194">http://tools.ietf.org/html/rfc5194</link>&gt;.</note>), used for SIP sessions with real-time text. In the situation where an implementor needs to decide which real-time text standard to use, it is generally recommended to use the real-time text specification of the specific session control standard in use for that particular session. This varies from implementation to implementation. For example, Google Talk network uses XMPP messaging for instant messages sent during audio/video conversations. Therefore, in this situation, it is recommended to use this XEP-0301 specification to add real-time text functionality. However, there are other situations where it is necessary to support multiple real-time-text standards, and to interoperate between the multiple real-time text standards.</p>
    </section2>
    <section2 topic="RFC 4103 and T.140" anchor="rfc_4103_and_t140">
    <p>One environment for such interoperability considerations is SIP with real-time text (also called Text over IP, or ToIP) as specified in ITU-T T.140 and IETF RFC 4103. This protocol combination is specified by IETF, and by regional emergency service organizations, to be one of the protocols supported for IP based real-time emergency calls that support real-time text. Another reason is that SIP is the currently dominating peering protocol between services, and many implementations of real-time text in SIP exist.</p>
    <p>Interoperability implies addressing translation, media negotiation and translation, and media transcoding. For media transcoding between this specification and T.140/RFC 4103, the real-time text transcoding is straight forward, except the editing feature of this specification. Backwards positioning and insertion or deletion far back in the message can cause a large number of erase operations in T.140, that takes time and bandwidth to convey.</p>
    <p>It should be noted that T.140 specifies use of ISO 6429 control codes for presentation characteristics such as text color etc, that are not covered in this version of this specification. All control codes from both sides that cannot be presented on the other side of the conversion, must be filtered off in order to not disturb the presentation of text.</p>
    <p>Also, see <link url="#total_conversation_combination_with_audio_and_video">Total Conversation – Combination With Audio And Video</link>.</p>
    </section2>
</section1>
    <section1 topic="Internationalization Considerations" anchor="internationalization_considerations">
    <p>The main internationalization consideration involve real-time message editing of international and mixed-language text. Correct calculations for <link url="#action_elements">Action Elements</link> based on <link url="#unicode_character_counting">Unicode Character Counting</link> is necessary to avoid scrambled text for many languages.</p>
    </section1>
    <section1 topic="Security Considerations" anchor="security_considerations">
        <section2 topic="Privacy" anchor="privacy">
    <p>It is important for implementors of real-time text to educate users about real-time text. Users of real-time text should be aware that their typing in the local input buffer is now visible to everyone in the current chat conversation. This may have security implications if users copy &amp; paste private information into their chat entry buffer (i.e. a shopping invoice) before editing out the private parts of the pasted text (i.e. a credit card number) before they send the message. With real-time message editing, recipients can watch all text changes that occur in the sender's text, before the sender sends the final message.</p>
    </section2>
    <section2 topic="Congestion Considerations" anchor="congestion_considerations">
    <p>The nature of real-time text result in more frequent transmission of &lt;message/&gt; elements than may otherwise happen in a non-real-time text conversation. This may lead to increased network and server loading of XMPP networks. Care SHOULD to be taken to use a reasonable <link url="#transmission_interval">Transmission Interval</link>, and avoid transmitting messages at an excessive rate, to avoid creating unnecessary congestion on public XMPP networks. Also, see &xep0205;.</p>
    <p>Network monitoring mechanisms (i.e. &xep0184; and/or &xep0199;, etc.) MAY be used to monitor reliability and latency, in order to temporarily adjust the interval to prevent failure of real-time text transmissions during extreme network conditions. This is also useful for mission-critical applications such as Next Generation 9-1-1 emergency services.</p>
    <p>The load between participants using this specification in the recommended way, will cause a load that is only marginally higher than a user communicating without this specification. Bandwidth overhead of real-time text is very low compared to many other activities possible on XMPP networks including VoIP and file transfers.</p>
    </section2>
</section1>
    <section1 topic="IANA Considerations" anchor="iana_considerations">
    <p>This document requires no interaction with the Internet Assigned Numbers Authority (IANA).</p>
    </section1>
    <section1 topic="XMPP Registrar Considerations" anchor="xmpp_registrar_considerations">
        <section2 topic="Protocol Namespaces" anchor="protocol_namespaces">
    <p>The XMPP Registrar should include "urn:xmpp:rtt:0" in its registry of protocol namespaces (see &lt;<link url="http://xmpp.org/registrar/namespaces.html">http://xmpp.org/registrar/namespaces.html</link>&gt;).</p>
    </section2>
    <section2 topic="Namespace Versioning" anchor="namespace_versioning">
    <p>If the protocol defined in this specification undergoes a revision that is not fully backwards-compatible with an older version, the XMPP Registrar shall increment the protocol version number found at the end of the XML namespaces defined herein, as described in Section 4 of XEP-0053.</p>
    </section2>
</section1>
    <section1 topic="XML Schema" anchor="xml_schema">
    <p><code><![CDATA[<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:xmpp:rtt:0'
    xmlns='urn:xmpp:rtt:0'
    elementFormDefault='qualified'>

  <xs:annotation>
    <xs:documentation>
      The protocol documented by this schema is defined in
      XEP-0301: http://www.xmpp.org/extensions/xep-0301.html
    </xs:documentation>
  </xs:annotation>

  <xs:element name='rtt'>
    <xs:complexType>
      <xs:attribute name='seq' type='xs:unsignedInteger' use='required'/>
      <xs:attribute name='event' type='xs:string' use='optional'/>
      <xs:sequence>
        <xs:element ref='t' minOccurs='0' maxOccurs='unbounded'/>
        <xs:element ref='e' minOccurs='0' maxOccurs='unbounded'/>
        <xs:element ref='d' minOccurs='0' maxOccurs='unbounded'/>
        <xs:element ref='w' minOccurs='0' maxOccurs='unbounded'/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:element name='t' type='xs:string'>
    <xs:complexType>
      <xs:attribute name='p' type='xs:unsignedInteger' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='e' type='empty'>
    <xs:complexType>
      <xs:attribute name='p' type='xs:unsignedInteger' use='optional'/>
      <xs:attribute name='n' type='xs:unsignedInteger' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='d' type='empty'>
    <xs:complexType>
      <xs:attribute name='p' type='xs:unsignedInteger' use='required'/>
      <xs:attribute name='n' type='xs:unsignedInteger' use='optional'/>
    </xs:complexType>
  </xs:element>

  <xs:element name='w' type='empty'>
    <xs:complexType>
      <xs:attribute name='n' type='xs:unsignedInteger' use='required'/>
    </xs:complexType>
  </xs:element>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>]]></code></p>
    </section1>
<h1>Acknowledgments</h1>
    <p>The author would like to thank Real-Time Text Taskforce (R3TF) at <link class="western" href="http://www.realtimetext.org/">www.realtimetext.org</link> for their contribution to the technology documented in this specification. Members of R3TF who have contributed to this document, including corrections and edits, include Gunnar Helstrom, Barry Dingle, Paul E. Jones, Arnoud van Wijk, and Gregg Vanderheiden.</p>
    <p>“Natural Typing”, the technique of preserving key press intervals, is acknowledged as an invention by Mark Rejhon, who is deaf. This technology is provided to XMPP.org as part of this specification in compliance of the XSF's Intellectual Property Rights Policy at <link class="western" href="http://xmpp.org/extensions/ipr-policy.shtml">http://xmpp.org/extensions/ipr-policy.shtml</link>. For more information, see Appendix C: Legal Notices.</p>



</xep>
