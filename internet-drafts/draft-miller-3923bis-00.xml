<?xml version="1.0"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc compact="yes"?>
<?rfc strict="yes"?>
<?rfc symrefs="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="4"?>
<rfc category="std" docName="draft-miller-rfc3923bis-00" ipr="trust200902" obsoletes="3923">

  <front>
    <title abbrev="XMPP E2E">End-to-End Object Encryption for the Extensible Messaging and Presence Protocol (XMPP)</title>
    <author initials="M." surname="Miller" fullname="Matthew Miller">
      <organization>Cisco</organization>
      <address>
        <email>mamille2@cisco.com</email>
      </address>
    </author>
    <date day="1" month="March" year="2010"/>
    <area>Applications</area>
    <keyword>Internet-Draft</keyword>
    <keyword>XMPP</keyword>
    <keyword>Extensible Messaging and Presence Protocol</keyword>
    <keyword>Jabber</keyword>
    <abstract>
      <t>This document defines a method of end-to-end object encryption for the Extensible Messaging and Presence Protocol (XMPP).  The protocol defined herein is a simplified version of the protocol defined in RFC 3923.</t>
    </abstract>
  </front>

  <middle>

    <section title="Introduction" anchor="intro">
      <t>End-to-end encryption of traffic sent over the Extensible Messaging and Presence Protocol <xref target='XMPP-CORE'/> is a desirable goal.  Requirements and a threat analysis for XMPP encryption are provided in <xref target='E2E-REQ'/>.  This document explores the possibility of using X.509 certificates and RSA encryption to meet those requirements.  It is intended to replace RFC 3923 by providing a simpler approach that does not require an XMPP client to parse MIME, CPIM, or MSGFMT; in addition, this protocol dispenses with cryptographic signing of XMPP presence stanzas.</t>
    </section>

    <section title="Terminology" anchor="terms">
      <t>This document inherits terminology defined in <xref target="XMPP-CORE"/>.</t>
      <t>The capitalized key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in <xref target="TERMS">BCP 14, RFC 2119</xref>.</t>
    </section>

    <section title='Securing XMPP Stanzas' anchor='stanza'>
      <t>The process a sending agent follows for securing stanzas is very similar regardless of the form of stanza (e.g. &lt;iq/&gt;, &lt;message/&gt;, and &lt;presence/&gt; from <xref target="XMPP-IM"/>).</t>
      <t><list style="numbers">
        <t>Constructs a cleartext version of the stanza, S.</t>
        <t>Notes the current date and time when this stanza is constructed, formatted as per <xref target="DATETIME"/>, N.</t>
        <t>Converts the stanza to a UTF-8 encoded string, optionally removing line breaks and other insignificant whitespace between elements and attributes i.e., UTF8-encode(S) = S'. We call S' a "stanza-string" because for purposes of encryption and decryption it is not treated as XML but as an opaque string.</t>
        <t>Creates a Message Authentication Code "M" for the stanza-string S' using <xref target="HMAC"/>. The algorithm is SHA256 and the sender's public key (R) is the secret.  The input to HMAC-SHA256 MUST be the timestamp from step 2 (conforming to <xref target='DATETIME'/>) appended by the cleartext sanza-string S', as follows:
        <figure>
          <artwork><![CDATA[
HMAC-SHA256( SHA256(R), UTF8-encode(N+S') )
          ]]></artwork>
        </figure></t>
        <t>Prepends M (which will be 32 octets in length) to the stanza-string S' to create a bytestring B.</t>
        <t>Encrypts the bytestring B using the recipient's public key to produce encrypted data T.</t>
        <t>Base64-encodes T to produce the encrypted data T'.</t>
        <t>Constructs a &lt;e2e&gt; element qualified by the "urn:ietf:params:xml:ns:xmpp-objenc" namespace, with the attribute 'stamp' set to the timestamp N from step 2, and T' as the XML character data of the &lt;e2e&gt; element.</t>
        <t>Sends the &lt;e2e/&gt; element as the payload to a stanza of the same form from step 1.</t>
      </list></t>

      <section title='Example of Securing Messages' anchor="message">
        <t>The sender begins with the cleartext version of the &lt;message/&gt; stanza "S":</t>
        <figure>
          <artwork><![CDATA[
<message    xmlns='jabber:client'
            from='juliet@capulet.net/balcony'
            id='183ef129'
            to='romeo@montegue.net'
            type='chat'>
    <thread>8996aef0-061d-012d-347a-549a200771aa</thread>
    <body>Wherefore art thou, Romeo?</body>
</message>
          ]]></artwork>
        </figure>
        <t>The Message Authentication Code is constructed from (line endings are included only for the sake of readability):</t>
        <figure>
          <artwork><![CDATA[
2010-02-28T18:00:00Z<message xmlns='jabber:client' 
from='juliet@capulet.net/balcony' id='183ef129' 
to='romeo@montegue.net' type='chat'><thread>
8996aef0-061d-012d-347a-549a200771aa</thread>
<body>Wherefore art thou, Romeo?</body></message>
          ]]></artwork>
        </figure>
        <t>The sender then performs the steps from above, and sends the following:</t>
        <figure>
          <artwork><![CDATA[
<message  xmlns='jabber:client'
          from='juliet@capulet.net/balcony'
          id='6410ed123'
          to='romeo@montegue.net'
          type='chat'>
  <thread>460f0da0-0628-012d-347b-549a200771aa</thread>
  <e2e  xmlns='urn:ietf:params:xml:ns:xmpp-objenc'
        stamp='2010-02-28T18:00:00Z'>
    oOb/huFlvC17+XxZdye4BAj4jN2yWiSQZts7BctqZB+wo1tCfHE0w
    BMQlof4\nC7KLn6+ktILqX6k5/IgQrwGF0hxKjFk44R01RcVmzlUS
    0HaSEIQVQk/3r33c\n3/NKzN8Cq+yzZKfP/p3KkpHMixCUTEe7B38
    Eu9h5hfs8PgXkb/GAdw7Ea/qW\nQgRjYcNl7jcplYY/FQQTEEfQoc
    fKCbm/RaOsRSMnqGjkqGGt6+yQGWtvzSS2\nHD4/EHGV62IGz/sQH
    5cAvloA9LqfiNh/oEm/UD2iLTAVj1BBS+WJZqMRznAJ\nNM4gF8vF
    nDdLAMyeMZedlrHCS4lp6PzeblDD0Jk2HQ==
  </e2e>
</message>
          ]]></artwork>
        </figure>
        <t>NOTE: The sender SHOULD include a &lt;thread/&gt; with each chat to maintain conversation continuity.</t>
      </section>
    </section>

    <section title="Decryption" anchor="decrypt">
      <t>If the receiving agent is unable to decrypt the encrypted XML stanza, it SHOULD NOT present the stanza to the intended recipient (human or application), SHOULD provide some explicit alternate processing of the stanza (which may be to display a message informing the recipient that it has received a stanza that cannot be decrypted), and MAY return a stanza error to the sender as described under <xref target="errors">Recipient Error Handling</xref>.</t>
    </section>

    <section title="Certificates" anchor="certs">
      <t>To participate in end-to-end encryption using the methods defined in this document, a client needs to possess an X.509 certificate.  It is expected that many clients will generate their own (self-signed) certificates rather than obtain a certificate issued by a certification authority (CA).  In any case the certificate MUST include an XMPP address that is represented using the ASN.1 Object Identifier "id-on-xmppAddr" as specified in Section 5.1.1 of <xref target="XMPP-CORE"/>.</t>
    </section>

    <section title="Inclusion and Checking of Timestamps" anchor="timestamps">
      <t>TODO: rework to something supporting offline usage.</t>
      <t>Timestamps are included to help prevent replay attacks.  All timestamps MUST conform to <xref target='DATETIME'/> and be presented as UTC with no offset, including fractions of a second as appropriate.  Absent a local adjustment to the sending agent's perceived time or the underlying clock time, the sending agent MUST ensure that the timestamps it sends to the receiver increase monotonically (if necessary by incrementing the seconds fraction in the timestamp if the clock returns the same time for multiple requests).  The following rules apply to the receiving application:</t>
      <t><list style="symbols">
        <t>It MUST verify that the timestamp received is within five minutes of the current time.</t>
        <t>It SHOULD verify that the timestamp received is greater than any timestamp received in the last 10 minutes which passed the previous check.</t>
        <t>If any of the foregoing checks fails, the timestamp SHOULD be presented to the receiving entity (human or application) marked as "old timestamp", "future timestamp", or "decreasing timestamp", and the receiving entity MAY return a stanza error to the sender as described under <xref target="errors">Recipient Error Handling</xref>.</t>
      </list></t>
    </section>

    <section title="Mandatory-to-Implement Cryptographic Algorithms" anchor="mti">
      <t>All implementations MUST support the following algorithms.  Implementations MAY support other algorithms as well.</t>
      <t><list style='symbols'>
        <t>The RSA (PKCS #1 v1.5) key transport, as specified in <xref target="CMS-ALG"/> section 4.2.1.</t>
        <t>The AES-128 encryption algorithm in CBC mode, as specified in <xref target="CMS-AES"/>.</t>
      </list></t>
    </section>

    <section title="Recipient Error Handling" anchor="errors">
      <t>When an XMPP entity receives an XML stanza containing data that is signed and/or encrypted using the protocol described herein, several scenarios are possible:</t>
      <t><list style='hanging'>
        <t hangText='Case #1:'>The receiving application does not understand the protocol.</t>
        <t hangText='Case #2:'>The receiving application understands the protocol and is able to decrypt the payload.</t>
        <t hangText='Case #3:'>The receiving application understands the protocol and is able to decrypt the payload, but the timestamps fail the checks specified above under <xref target="timestamps">Checking of Timestamps</xref>.</t>
         <t> hangText='Case #4:'>The receiving application understands the protocol but is unable to decrypt the payload.</t>
      </list></t>
      <t>In Case #1, the receiving application MUST do one and only one of the following: (1) ignore the &lt;e2e/&gt; extension, (2) ignore the entire stanza, or (3) return a &lt;service-unavailable/&gt; error to the sender, as described in <xref target="XMPP-CORE"/>.</t>
      <t>In Case #2, the receiving application MUST NOT return a stanza error to the sender, since this is the success case.</t>
      <t>In Case #3, the receiving application MAY return a &lt;not-acceptable/&gt; error to the sender (as described in <xref target="XMPP-CORE"/>), optionally supplemented by an application-specific error condition element &lt;bad-timestamp/&gt; as shown below:</t>
      <figure>
        <artwork><![CDATA[
<message from='romeo@example.net/orchard' type='chat'>
  <e2e xmlns='urn:ietf:params:xml:ns:xmpp-objenc'>
  [CDATA section here]
  </e2e>
  <error type='modify'>
    <not-acceptable xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <bad-timestamp xmlns='urn:ietf:params:xml:xmpp-e2e'/>
  </error>
</message>
        ]]></artwork>
      </figure>
      <t>In Case #4, the receiving application SHOULD return a &lt;bad-request/&gt; error to the sender (as described in <xref target="XMPP-CORE"/>), optionally supplemented by an application-specific error condition element &lt;decryption-failed/&gt; as shown below:</t>
      <figure>
        <preamble>Example 18: Recipient returns &lt;bad-request/&gt; error:</preamble>
        <artwork><![CDATA[
<message from='romeo@example.net/orchard' type='chat'>
  <e2e xmlns='urn:ietf:params:xml:ns:xmpp-objenc'>
  [CDATA section here]
  </e2e>
  <error type='modify'>
    <bad-request xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
    <decryption-failed xmlns='urn:ietf:params:xml:xmpp-e2e'/>
  </error>
</message>
        ]]></artwork>
      </figure>
    </section>

    <section title='Security Considerations' anchor='security'>
      <t>To follow.</t>
    </section>

    <section title="IANA Considerations" anchor="iana">
      <section title="XML Namespace Name for e2e Data in XMPP" anchor="iana-ns-e2e">
        <t>A URN sub-namespace of signed and encrypted content for the Extensible Messaging and Presence Protocol (XMPP) is defined as follows.</t>
        <t><list style='hanging'> 
          <t hangText='URI:'>urn:ietf:params:xml:ns:xmpp-objenc</t> 
          <t hangText='Specification:'>RFC XXXX</t>
          <t hangText='Description:'>This is an XML namespace name of signed and encrypted content for the Extensible Messaging and Presence Protocol as defined by RFC XXXX.</t>
          <t hangText='Registrant Contact:'>IESG, &lt;iesg@ietf.org&gt;</t> 
        </list></t>
      </section>
    </section>

  </middle>

  <back>

    <references title="Normative References">

<reference anchor='CMS-AES'>
<front>
<title>Use of the Advanced Encryption Standard (AES) Encryption Algorithm in Cryptographic Message Syntax (CMS)</title>
<author initials='J.' surname='Schaad' fullname='J. Schaad'>
<organization /></author>
<date year='2003' month='July' /></front>
<seriesInfo name='RFC' value='3565' />
<format type='TXT' octets='26773' target='ftp://ftp.isi.edu/in-notes/rfc3565.txt' />
</reference>

<reference anchor='CMS-ALG'>
  <front>
    <title>Cryptographic Message Syntax (CMS) Algorithms</title>
    <author initials='R.' surname='Housley' fullname='R.  Housley'><organization /></author>
    <date month='August' year='2002' />
  </front>
  <seriesInfo name='RFC' value='3370' />
  <format type='TXT' octets='51001' target='ftp://ftp.isi.edu/in-notes/rfc3370.txt' />
</reference>

<reference anchor='DATETIME'>
<front>
<title>Date and Time on the Internet: Timestamps</title>
<author initials='G.' surname='Klyne' fullname='G. Klyne'>
<organization /></author>
<author initials='C.' surname='Newman' fullname='C. Newman'>
<organization /></author>
<date month='July' year='2002' /></front>
<seriesInfo name='RFC' value='3339' />
<format type='TXT' octets='35064' target='ftp://ftp.isi.edu/in-notes/rfc3339.txt' />
</reference>

<reference anchor='E2E-REQ'>
<front>
<title>Requirements for End-to-End Encryption in the Extensible Messaging and Presence Protocol (XMPP)</title>
<author initials='P' surname='Saint-Andre' fullname='Peter Saint-Andre'>
    <organization />
</author>
<date month='June' day='29' year='2009' />
<abstract><t>This document describes requirements for end-to-end encryption in the Extensible Messaging and Presence Protocol (XMPP).</t></abstract>
</front>
<seriesInfo name='Internet-Draft' value='draft-saintandre-xmpp-e2e-requirements-01' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-saintandre-xmpp-e2e-requirements-01.txt' />
</reference>

      <reference anchor='TERMS'>
        <front>
          <title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author initials='S.' surname='Bradner' fullname='Scott Bradner'>
            <organization>Harvard University</organization>
            <address>
              <postal>
                <street>1350 Mass.  Ave.</street>
                <street>Cambridge</street>
                <street>MA 02138</street>
              </postal>
              <phone>- +1 617 495 3864</phone>
              <email>-</email>
            </address>
          </author>
          <date month='March' year='1997'></date>
          <area>General</area>
          <keyword>keyword</keyword>
          <abstract>
            <t>In many standards track documents several words are used to signify the requirements in the specification.  These words are often capitalized.  This document defines these words as they should be interpreted in IETF documents.  Authors who follow these guidelines should incorporate this phrase near the beginning of their document: 
              <list>
                <t>The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,  &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be interpreted as described in RFC 2119.</t>
              </list>
            </t>
            <t>Note that the force of these words is modified by the requirement level of the document in which they are used.</t>
          </abstract>
        </front>
        <seriesInfo name='BCP' value='14' />
        <seriesInfo name='RFC' value='2119' />
      </reference>

<reference anchor='XMPP-CORE'>
  <front>
    <title>Extensible Messaging and Presence Protocol (XMPP): Core</title>
    <author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'>
      <organization>Jabber Software Foundation</organization>
    </author>
    <date year='2004' month='October' />
  </front>
  <seriesInfo name='RFC' value='3920' />
  <format type='TXT' octets='194313' target='ftp://ftp.isi.edu/in-notes/rfc3920.txt' />
</reference>

<reference anchor='XMPP-IM'>
  <front>
    <title>Extensible Messaging and Presence Protocol (XMPP): Instant Messaging and Presence</title>
    <author initials='P.' surname='Saint-Andre' fullname='P. Saint-Andre'>
      <organization>Jabber Software Foundation</organization>
    </author>
    <date year='2004' month='October' />
  </front>
  <seriesInfo name='RFC' value='3921' />
  <format type='TXT' octets='217527' target='ftp://ftp.isi.edu/in-notes/rfc3921.txt' />
</reference>

    </references>

    <references title="Informative References">

<reference anchor="HMAC">
  <front>
    <title>The Keyed-Hash Message Authentication Code (HMAC): Federal Information Processing Standards Publication 198</title>
    <author/>
  </front>
</reference>

    </references>

    <section title="Schema for urn:ietf:params:xml:ns:xmpp-objenc" anchor="schemas-e2e">
      <t>The following XML schema is descriptive, not normative.</t>
      <figure>
        <artwork><![CDATA[
<?xml version='1.0' encoding='UTF-8'?>

<xs:schema
    xmlns:xs='http://www.w3.org/2001/XMLSchema'
    targetNamespace='urn:ietf:params:xml:ns:xmpp-objenc'
    xmlns='urn:ietf:params:xml:ns:xmpp-objenc'
    elementFormDefault='qualified'>

  <xs:element name='e2e' type='xs:string'/>

  <xs:element name='decryption-failed' type='empty'/>
  <xs:element name='signature-unverified' type='empty'/>
  <xs:element name='bad-timestamp' type='empty'/>

  <xs:simpleType name='empty'>
    <xs:restriction base='xs:string'>
      <xs:enumeration value=''/>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
        ]]></artwork>
      </figure>
    </section>

  </back>

</rfc>
